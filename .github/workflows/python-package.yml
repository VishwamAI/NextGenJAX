name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Install Bazel
      run: |
        sudo apt-get install apt-transport-https curl gnupg -y
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
        sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
        echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt-get update && sudo apt-get install bazel -y
    - name: Install DeepMind Lab dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-numpy python3-pil libboost-all-dev libsdl2-dev \
          libjpeg-dev nasm zip libbz2-dev libffi-dev libssl-dev curl build-essential
    - name: Install gettext
      run: sudo apt-get install -y gettext
    - name: Update PATH for gettext
      run: |
        echo "PATH=/usr/bin:$PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: Verify gettext installation
      run: |
        which gettext
        gettext --version
    - name: Set PKG_CONFIG_PATH
      run: |
        echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
    - name: Install OSMesa library
      run: |
        sudo apt-get update
        sudo apt-get install -y libosmesa6-dev
    - name: Clone and install DeepMind Lab
      run: |
        git clone https://github.com/deepmind/lab.git
        cd lab
        pkg-config --cflags --libs glib-2.0
        export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH
        bazel build --verbose_failures -c opt //:deepmind_lab.so
        ls -l ./bazel-bin/  # List the contents of the build output directory
        mkdir -p /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/deepmind_lab/
        cp ./bazel-bin/deepmind_lab.so /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/deepmind_lab/
        pip install --no-deps .
        echo "DeepMind Lab installation directory:"
        ls -l /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/deepmind_lab/
        python -c "import site; print(site.getsitepackages())"
    - name: Debug - List DeepMind Lab build directory
      run: |
        ls -R lab/bazel-bin/
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
    - name: Debug - Check Python site-packages
      run: |
        ls -R /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/
        echo "PYTHONPATH: $PYTHONPATH"
    - name: Install dm_env
      run: |
        python -m pip install --upgrade pip
        pip install dm_env
    - name: Verify DeepMind Lab installation
      run: |
        python -c "import deepmind_lab; import dm_env; print(deepmind_lab.__file__); print(dm_env.__file__)"
    - name: Debug Python path and site-packages
      run: |
        python -c "import sys; print('Python path:', sys.path)"
        ls -R /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/
        echo "Contents of deepmind_lab directory:"
        ls -l /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/deepmind_lab/
    - name: Debug - Print Python sys.path and DEEPMIND_LAB_PATH
      run: |
        python -c "import sys; print('Python sys.path:', sys.path)"
        echo "DEEPMIND_LAB_PATH=$DEEPMIND_LAB_PATH"
    - name: Debug - Check DeepMind Lab installation
      run: |
        python -c "import sys; print(sys.path)"
        python -c "import deepmind_lab; print(deepmind_lab.__file__)"
    - name: Verify deepmind_lab.so file
      run: |
        ls -l /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/deepmind_lab/deepmind_lab.so
    - name: Verify deepmind_lab.so in site-packages
      run: |
        ls -l /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/deepmind_lab/
    - name: Install TensorFlow and PyTorch
      run: |
        pip install tensorflow torch torchvision torchaudio
    - name: Install additional dependencies
      run: |
        pip install transformers
    - name: Verify library installations
      run: |
        python -c "import tensorflow as tf; import torch; from transformers import AutoModel; import deepmind_lab; import dm_env; print('TensorFlow version:', tf.__version__); print('PyTorch version:', torch.__version__); print('Transformers version:', transformers.__version__); print('DeepMind Lab version:', deepmind_lab.__version__); print('dm_env version:', dm_env.__version__)"
    - name: Debug - Final environment check
      run: |
        env
        pip list
        python -c "import site; print(site.getsitepackages())"
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest tests/ --framework=tensorflow --framework=pytorch
