name: Python package

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Print Python and pip versions
      run: |
        python --version
        pip --version
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Print requirements files
      run: |
        echo "::group::Print requirements files"
        set -x
        echo "Contents of requirements.txt:"
        cat requirements.txt
        echo "Contents of test_requirements.txt:"
        cat test_requirements.txt
        echo "::endgroup::"
    - name: Install dependencies
      run: |
        echo "::group::Install dependencies"
        set -x
        python -m pip install --upgrade pip
        pip install flake8 pytest transformers
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f test_requirements.txt ]; then pip install -r test_requirements.txt; fi
        echo "::endgroup::"
      timeout-minutes: 20
    - name: Install nextgenjax
      run: |
        echo "::group::Install nextgenjax"
        set -x
        pip install -e .
        echo "nextgenjax installation completed"
        echo "::endgroup::"
    - name: Print src/__init__.py contents
      run: |
        echo "::group::Print src/__init__.py contents"
        set -x
        echo "Contents of src/__init__.py:"
        cat src/__init__.py
        echo "::endgroup::"
    - name: List contents of src directory
      run: |
        echo "::group::List contents of src directory"
        set -x
        echo "Contents of src directory:"
        ls -R src
        echo "::endgroup::"
    - name: List installed packages
      run: |
        echo "::group::List installed packages"
        set -x
        pip list
        pip show nextgenjax
        echo "::endgroup::"
    - name: Print nextgenjax.egg-info contents
      run: |
        echo "::group::Print nextgenjax.egg-info contents"
        set -x
        echo "Contents of nextgenjax.egg-info:"
        ls -R src/nextgenjax.egg-info
        echo "::endgroup::"
    - name: Print installation info
      run: |
        echo "::group::Print installation info"
        set -x
        echo "Installation directory:"
        pip show nextgenjax
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "::endgroup::"
    - name: Print sys.path
      run: |
        echo "::group::Print sys.path"
        set -x
        python -c "import sys; print('sys.path:', sys.path)"
        echo "::endgroup::"
    - name: Set PYTHONPATH
      run: |
        echo "::group::Set PYTHONPATH"
        set -x
        echo "PYTHONPATH=${{ github.workspace }}/src" >> $GITHUB_ENV
        echo "::endgroup::"
    - name: Debug Python environment
      run: |
        echo "::group::Debug Python environment"
        set -x
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -R
        echo "PYTHONPATH: $PYTHONPATH"
        echo "Python sys.path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Installed packages:"
        pip list
        echo "::endgroup::"
    - name: Debug - List installed packages
      run: |
        echo "::group::Debug - List installed packages"
        set -x
        echo "PYTHONPATH: $PYTHONPATH"
        pip list
        pip list --path src
        python -c "import sys; print(sys.path)"
        echo "::endgroup::"
    - name: Confirm working directory and PYTHONPATH
      run: |
        echo "::group::Confirm working directory and PYTHONPATH"
        set -x
        cd ${{ github.workspace }}
        echo "Current working directory: $(pwd)"
        echo "Contents of src directory:"
        ls -R src
        echo "PYTHONPATH: $PYTHONPATH"
        echo "::endgroup::"
    - name: Debug - List src directory contents
      run: |
        echo "::group::Debug - List src directory contents"
        echo "Contents of src directory:"
        ls -R src/
        echo "::endgroup::"
    - name: Debug - Print PYTHONPATH
      run: |
        echo "::group::Debug - Print PYTHONPATH"
        echo "PYTHONPATH: $PYTHONPATH"
        echo "::endgroup::"
    - name: Debug - Print Python sys.path
      run: |
        echo "::group::Debug - Print Python sys.path"
        python -c "import sys; print('sys.path:', sys.path)"
        echo "::endgroup::"
    - name: Test nextgenjax import
      run: |
        echo "::group::Test nextgenjax import"
        set -x
        python -c "import sys; print('Original sys.path:', sys.path)"
        python -c "import sys; sys.path.append('/home/runner/work/NextGenJAX/NextGenJAX/src'); print('Updated sys.path:', sys.path); import nextgenjax; print('nextgenjax imported successfully')" || { echo "Import failed with error:"; python -c "import sys; sys.path.append('/home/runner/work/NextGenJAX/NextGenJAX/src'); import nextgenjax" 2>&1; exit 1; }
        echo "::endgroup::"
    - name: List installed packages
      run: |
        echo "::group::List installed packages"
        set -x
        pip list
        echo "::endgroup::"
    - name: Lint with flake8
      run: |
        echo "::group::Lint with flake8"
        set -x
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "::endgroup::"
    - name: Print PYTHONPATH
      run: |
        echo "::group::Print PYTHONPATH"
        set -x
        echo $PYTHONPATH
        echo "::endgroup::"
    - name: Run unit tests
      run: |
        echo "::group::Run unit tests"
        set -x
        echo "Current working directory: $(pwd)"
        echo "PYTHONPATH: $PYTHONPATH"
        echo "Python sys.path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Attempting to import nextgenjax:"
        python -c "import nextgenjax; print(f'nextgenjax imported successfully from {nextgenjax.__file__}')" || echo "Failed to import nextgenjax"
        pytest tests/unit -v
        echo "::endgroup::"
      timeout-minutes: 10

    - name: Run integration tests
      run: |
        echo "::group::Run integration tests"
        set -x
        pytest tests/integration -v
        echo "::endgroup::"
      timeout-minutes: 15

    - name: Run other tests
      run: |
        echo "::group::Run other tests"
        set -x
        pytest tests/ -v --ignore=tests/unit --ignore=tests/integration
        echo "::endgroup::"
      timeout-minutes: 10

  cuda-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
      timeout-minutes: 5
    - name: Install CUDA dependencies
      run: |
        # Add commands to install CUDA dependencies
      timeout-minutes: 15
    - name: Run CUDA-specific tests
      run: |
        # Add commands to run CUDA-specific tests
      timeout-minutes: 20